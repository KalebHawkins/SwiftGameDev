{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Swift Game Dev Welcome to Swift Game Dev! This site aims to teach a wide array of game development topics in the iOS game ecosystem. To get started goto the tutorials section in the left-hand menu and select the framework of interest. Under Construction.","title":"Home"},{"location":"#welcome-swift-game-dev","text":"Welcome to Swift Game Dev! This site aims to teach a wide array of game development topics in the iOS game ecosystem. To get started goto the tutorials section in the left-hand menu and select the framework of interest. Under Construction.","title":"Welcome Swift Game Dev"},{"location":"about/","text":"About SwiftGameDev is a site that aims to deliver high-quality tutorials for creating games with SwiftUI, UIKit, Spritekit, Scenekit, and ARkit. In the future, this site may contain tutorials for Godot, game art creation, and a broad range of topics around the world of game development. So stay tuned and visit the page every once in a while. That's about it for now. Good luck on your game development journey.","title":"About"},{"location":"about/#about","text":"SwiftGameDev is a site that aims to deliver high-quality tutorials for creating games with SwiftUI, UIKit, Spritekit, Scenekit, and ARkit. In the future, this site may contain tutorials for Godot, game art creation, and a broad range of topics around the world of game development. So stay tuned and visit the page every once in a while. That's about it for now. Good luck on your game development journey.","title":"About"},{"location":"tutorials/000-Preparations/","text":"Before You Begin The tutorials here assume some programming experience in an Apple development environment. If you don't have any prior programming experience I recommend using the resources below to gain some comfort level with Swift and the Apple development environment. Course Description Angela Yu's Udemy Course One of the best places to start learning iOS development. The course stays updated, is of high quality, and the teaching style is at a pace that anyone could keep up. Stanford University CS193p 2017-2018 This is an excellent resource to learn iOS development. Stanford University CS193p 2020 This is a faster-paced course but covers things in great detail. The course focuses on SwiftUI. Hacking With Swift Search anything involving Swift HackingWithSwift will appear. The content is high quality. Ray Wenderlinch A site much like HackingWithSwift. There is high-quality content here. Do not try to consume everything from every link listed above. Doing so will burn anyone out with little to no progress. The best thing to do is learn concepts and then put those concepts to practice at a steady pace.","title":"Before You Begin"},{"location":"tutorials/000-Preparations/#before-you-begin","text":"The tutorials here assume some programming experience in an Apple development environment. If you don't have any prior programming experience I recommend using the resources below to gain some comfort level with Swift and the Apple development environment. Course Description Angela Yu's Udemy Course One of the best places to start learning iOS development. The course stays updated, is of high quality, and the teaching style is at a pace that anyone could keep up. Stanford University CS193p 2017-2018 This is an excellent resource to learn iOS development. Stanford University CS193p 2020 This is a faster-paced course but covers things in great detail. The course focuses on SwiftUI. Hacking With Swift Search anything involving Swift HackingWithSwift will appear. The content is high quality. Ray Wenderlinch A site much like HackingWithSwift. There is high-quality content here. Do not try to consume everything from every link listed above. Doing so will burn anyone out with little to no progress. The best thing to do is learn concepts and then put those concepts to practice at a steady pace.","title":"Before You Begin"},{"location":"tutorials/001-FirstProject/","text":"Getting Started What is Spritekit? Apple describes Spritekit as a general-purpose framework for drawing shapes, particles, text, images, and video in two dimensions. It leverages Metal to achieve high-performance rendering while offering a simple programming interface to make it easy to create games and other graphics-intensive apps. Using a rich set of animations and physics behaviors, you can quickly add life to your visual elements and gracefully transition between screens. Your First Project This first project will be simple. The goal is to draw a circle. Get Xcode The first thing to do is ensure Xcode is downloaded and installed. Creating the Project Open Xcode Create a new project Select IOS Select App Fill out the required fields Product Name: WhateverYouWant Team: WhatEverYouWant Organizational Identifier: com.whateverYouWant Interface: Storyboard Lifecycle: UIKit App Delegate Language: Swift The SKView Class In Apple's documentation, they walk through creating a Scene, drawing a node, and finally presenting the scene. They don't explain setting up the View that you present. The View needs to be of class SKView . The SKView class is primarily used to present a SKScene . There are many other methods that SKView can support but for simplicity these will be covered in later tutorials. Setup SKView There are two ways to set the View as a SKView . The first method is to go to your Main.Storyboard file and select the main View and change its class to SKView as seen in the images below. The second method is to set the View programmatically. It is not recommended to use this approach because of bug encounters with it. Integrating Spritekit Navigate to the ViewController.swift file there will be code very similar to the following: 1 2 3 4 5 6 7 8 9 import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Do any additional setup after loading the view. } } To integrate Spritekit into the project use the import Spritekit statement to import the framework into the project. 1 2 3 4 5 6 7 import UIKit // Import Spritekit here import Spritekit class ViewController : UIViewController { //... } The SKSceneClass A SKScene object represents a scene of content in SpriteKit. A scene is the root node in a tree of SpriteKit nodes ( SKNode ). These nodes provide content that the scene animates and renders for display. To display a scene, you present it from an SKView , SKRenderer , or WKInterfaceSKScene . There are many things that can be done with the SKScene object: Stretch the Content to Fit the View Configure the ViewPort (Define what part of the scene is visible at a given time) Respond to loading and resizing events Respond to Frame-Cycle events Delegating a scene Change background appearance Configure Physics Add positional audio Note that a SKScene inherits from the SKEffectNode . That means anything that can be done with the SKEffectNode can be performed on a SKScene . These action can include: Apply Core Image Filters Warping Nodes Applying Shaders Flatten Node Tree's for improved performance Configure Alpha blending Creating SKScene Everything displayed with SpriteKit is done through a scene object, which is an instance of SKScene . To set up a SKScene use the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import UIKit import Spritekit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Check the view to ensure it is of type SKView if let skView = view as ? SKView { // Initialize a SKScene object. // By passing the size of the view's bounds // the scene will fit to the screen. let scene = SKScene ( size : skView . bounds . size ) // Present the scene skView . presentScene ( scene ) } } } Creating a Scene File Instead of creating a scene from a View 's size, a file can be used. To create a scene file press Cmd + N , search scene in the filter and select Spritekit Scene . Careful not to select Scenekit Scene . This will put you in Xcode's scene editor. This is where base configuration of the scene should take place. Linking the Scene Now to link the file up to the code. Navigate back to the ViewController.swift file and use the following code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import UIKit import SpriteKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () if let skView = view as ? SKView { // Use the SKScene(fileName:) function to load the scene. // The string \"MyScene\" comes from the name of the sks file. // So if the name of the file was Level01.sks you would replace \"MyScene\" with \"Level01\" if let scene = SKScene ( fileNamed : \"MyScene\" ) { // Set the scenes anchor point (origin) scene . anchorPoint = CGPoint ( x : 0.5 , y : 0.5 ) // Present the scene skView . presentScene ( scene ) } } } } Don't worry about line 15 for now. It is explained in detail in the next tutorial . Compile and run your code using Cmd + R . You should see an empty grey screen. Modifying the Scene The SKScene editor is handy for the base configuration of a scene. It also cuts down on code pollution in the source files. Take time to explore and get a feel for what can be done with the editor. For example navigating back the MyScene.sks and changing the background color can be done by clicking the Attributes Inspector and selecting the color from the color attributes. Adding Sprites and Nodes to the Scene You can can sprites and nodes to the scene using the editor as well. Back in the .sks file click the + button in the upper right hand corner of the scene editor. Notice that the context of the attributes editor changes when selecting a node. This allows for different aspects of the node to be modified. The Scene's Node Tree The editor allows you to visualize your nodes in a tree-like structure. Nodes can be nested and organized. When a node is nested below another node it becomes a child or it's parent node. Things like inheritance for certain attributes take place unless overridden by the child node. These are important concepts to keep in mind. Adding Nodes Programmatically The ViewController should be filled with code specific to the ViewController . Nodes, sprites, and other game objects should reside within their own scene. To make this work a class should be created to manage the sks file programmatically. Add a new file to the project by pressing Cmd + N and selecting Swift File . Next set the Custom Class of the .sks scene file to the name of the new class. In this case the name will be MyScene . Create the MyScene custom class in the MyScene.swift file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import SpriteKit // Create an SKScene class with the name MyScene class MyScene : SKScene { // Create a circle shape with SKShapeNode let circle = SKShapeNode ( circleOfRadius : 50 ) // Use the SKScene.didMove(to view: SKView) method to modify any attributes of the node. override func didMove ( to view : SKView ) { // Set the node's fill color to red. circle . fillColor = . red // Add the circle as a child to the scene addChild ( circle ) } } The didMove(to view: SKView) function is intended to be overridden in a subclass. Use this method to implement any custom behavior for the scene when it is about to be presented by a view. Remove any nodes placed in the scene from the editor and then compile and run your code using the Cmd + R keys. Something very similar to the below image should appear. It may take a few minutes the first time the project is compiled. Congratulations You have completed the first project. You have something to show! Getting this far takes a lot of work. Exercises Here are some challenges. Remember when doing these exercises that documentation and Google are tools. There is no shame in using them. The references will help guide you through the exercises. Questions What is a SKView ? What is a SKScene ? What is a SKNode ? Challenges Change the color of the circle. Change the border color of the circle. Change the background color of the scene. Add a square shape to the scene. Change the position of the shapes. Create a new scene with a different background color and present that scene. Read the SKScene documentation (see the References ). Change the Scenes origin . Set the position of a node using the editor. Understand the sceneDidLoad() , didChangeSize(CGSize:) , willMove(from: SKView) , didMove(to: SKView) functions and how/when to use them. Review the Conforms To and Essentials section of SKScene documentation. Try to configure physics (you will need a node with a physicsbody ). Solutions Coming Soon References SKView Documentation SKScene Documentation SKShapeNode Documentation Google SKScene Origin Creating a SKScene from File Google Extra Reading The link below is the documentation explaining different nodes and node types. It is recommended you at least read over the section Using Base Nodes to Lay Out SpriteKit Content and Maximizing Node Drawing Performance to get a general idea of the capabilities of different nodes. Nodes for Scene Building","title":"Your First Project"},{"location":"tutorials/001-FirstProject/#getting-started","text":"","title":"Getting Started"},{"location":"tutorials/001-FirstProject/#what-is-spritekit","text":"Apple describes Spritekit as a general-purpose framework for drawing shapes, particles, text, images, and video in two dimensions. It leverages Metal to achieve high-performance rendering while offering a simple programming interface to make it easy to create games and other graphics-intensive apps. Using a rich set of animations and physics behaviors, you can quickly add life to your visual elements and gracefully transition between screens.","title":"What is Spritekit?"},{"location":"tutorials/001-FirstProject/#your-first-project","text":"This first project will be simple. The goal is to draw a circle.","title":"Your First Project"},{"location":"tutorials/001-FirstProject/#get-xcode","text":"The first thing to do is ensure Xcode is downloaded and installed.","title":"Get Xcode"},{"location":"tutorials/001-FirstProject/#creating-the-project","text":"Open Xcode Create a new project Select IOS Select App Fill out the required fields Product Name: WhateverYouWant Team: WhatEverYouWant Organizational Identifier: com.whateverYouWant Interface: Storyboard Lifecycle: UIKit App Delegate Language: Swift","title":"Creating the Project"},{"location":"tutorials/001-FirstProject/#the-skview-class","text":"In Apple's documentation, they walk through creating a Scene, drawing a node, and finally presenting the scene. They don't explain setting up the View that you present. The View needs to be of class SKView . The SKView class is primarily used to present a SKScene . There are many other methods that SKView can support but for simplicity these will be covered in later tutorials.","title":"The SKView Class"},{"location":"tutorials/001-FirstProject/#setup-skview","text":"There are two ways to set the View as a SKView . The first method is to go to your Main.Storyboard file and select the main View and change its class to SKView as seen in the images below. The second method is to set the View programmatically. It is not recommended to use this approach because of bug encounters with it.","title":"Setup SKView"},{"location":"tutorials/001-FirstProject/#integrating-spritekit","text":"Navigate to the ViewController.swift file there will be code very similar to the following: 1 2 3 4 5 6 7 8 9 import UIKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Do any additional setup after loading the view. } } To integrate Spritekit into the project use the import Spritekit statement to import the framework into the project. 1 2 3 4 5 6 7 import UIKit // Import Spritekit here import Spritekit class ViewController : UIViewController { //... }","title":"Integrating Spritekit"},{"location":"tutorials/001-FirstProject/#the-sksceneclass","text":"A SKScene object represents a scene of content in SpriteKit. A scene is the root node in a tree of SpriteKit nodes ( SKNode ). These nodes provide content that the scene animates and renders for display. To display a scene, you present it from an SKView , SKRenderer , or WKInterfaceSKScene . There are many things that can be done with the SKScene object: Stretch the Content to Fit the View Configure the ViewPort (Define what part of the scene is visible at a given time) Respond to loading and resizing events Respond to Frame-Cycle events Delegating a scene Change background appearance Configure Physics Add positional audio Note that a SKScene inherits from the SKEffectNode . That means anything that can be done with the SKEffectNode can be performed on a SKScene . These action can include: Apply Core Image Filters Warping Nodes Applying Shaders Flatten Node Tree's for improved performance Configure Alpha blending","title":"The SKSceneClass"},{"location":"tutorials/001-FirstProject/#creating-skscene","text":"Everything displayed with SpriteKit is done through a scene object, which is an instance of SKScene . To set up a SKScene use the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import UIKit import Spritekit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () // Check the view to ensure it is of type SKView if let skView = view as ? SKView { // Initialize a SKScene object. // By passing the size of the view's bounds // the scene will fit to the screen. let scene = SKScene ( size : skView . bounds . size ) // Present the scene skView . presentScene ( scene ) } } }","title":"Creating SKScene"},{"location":"tutorials/001-FirstProject/#creating-a-scene-file","text":"Instead of creating a scene from a View 's size, a file can be used. To create a scene file press Cmd + N , search scene in the filter and select Spritekit Scene . Careful not to select Scenekit Scene . This will put you in Xcode's scene editor. This is where base configuration of the scene should take place.","title":"Creating a Scene File"},{"location":"tutorials/001-FirstProject/#linking-the-scene","text":"Now to link the file up to the code. Navigate back to the ViewController.swift file and use the following code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import UIKit import SpriteKit class ViewController : UIViewController { override func viewDidLoad () { super . viewDidLoad () if let skView = view as ? SKView { // Use the SKScene(fileName:) function to load the scene. // The string \"MyScene\" comes from the name of the sks file. // So if the name of the file was Level01.sks you would replace \"MyScene\" with \"Level01\" if let scene = SKScene ( fileNamed : \"MyScene\" ) { // Set the scenes anchor point (origin) scene . anchorPoint = CGPoint ( x : 0.5 , y : 0.5 ) // Present the scene skView . presentScene ( scene ) } } } } Don't worry about line 15 for now. It is explained in detail in the next tutorial . Compile and run your code using Cmd + R . You should see an empty grey screen.","title":"Linking the Scene"},{"location":"tutorials/001-FirstProject/#modifying-the-scene","text":"The SKScene editor is handy for the base configuration of a scene. It also cuts down on code pollution in the source files. Take time to explore and get a feel for what can be done with the editor. For example navigating back the MyScene.sks and changing the background color can be done by clicking the Attributes Inspector and selecting the color from the color attributes.","title":"Modifying the Scene"},{"location":"tutorials/001-FirstProject/#adding-sprites-and-nodes-to-the-scene","text":"You can can sprites and nodes to the scene using the editor as well. Back in the .sks file click the + button in the upper right hand corner of the scene editor. Notice that the context of the attributes editor changes when selecting a node. This allows for different aspects of the node to be modified.","title":"Adding Sprites and Nodes to the Scene"},{"location":"tutorials/001-FirstProject/#the-scenes-node-tree","text":"The editor allows you to visualize your nodes in a tree-like structure. Nodes can be nested and organized. When a node is nested below another node it becomes a child or it's parent node. Things like inheritance for certain attributes take place unless overridden by the child node. These are important concepts to keep in mind.","title":"The Scene's Node Tree"},{"location":"tutorials/001-FirstProject/#adding-nodes-programmatically","text":"The ViewController should be filled with code specific to the ViewController . Nodes, sprites, and other game objects should reside within their own scene. To make this work a class should be created to manage the sks file programmatically. Add a new file to the project by pressing Cmd + N and selecting Swift File . Next set the Custom Class of the .sks scene file to the name of the new class. In this case the name will be MyScene . Create the MyScene custom class in the MyScene.swift file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import SpriteKit // Create an SKScene class with the name MyScene class MyScene : SKScene { // Create a circle shape with SKShapeNode let circle = SKShapeNode ( circleOfRadius : 50 ) // Use the SKScene.didMove(to view: SKView) method to modify any attributes of the node. override func didMove ( to view : SKView ) { // Set the node's fill color to red. circle . fillColor = . red // Add the circle as a child to the scene addChild ( circle ) } } The didMove(to view: SKView) function is intended to be overridden in a subclass. Use this method to implement any custom behavior for the scene when it is about to be presented by a view. Remove any nodes placed in the scene from the editor and then compile and run your code using the Cmd + R keys. Something very similar to the below image should appear. It may take a few minutes the first time the project is compiled.","title":"Adding Nodes Programmatically"},{"location":"tutorials/001-FirstProject/#congratulations","text":"You have completed the first project. You have something to show! Getting this far takes a lot of work.","title":"Congratulations"},{"location":"tutorials/001-FirstProject/#exercises","text":"Here are some challenges. Remember when doing these exercises that documentation and Google are tools. There is no shame in using them. The references will help guide you through the exercises.","title":"Exercises"},{"location":"tutorials/001-FirstProject/#questions","text":"What is a SKView ? What is a SKScene ? What is a SKNode ?","title":"Questions"},{"location":"tutorials/001-FirstProject/#challenges","text":"Change the color of the circle. Change the border color of the circle. Change the background color of the scene. Add a square shape to the scene. Change the position of the shapes. Create a new scene with a different background color and present that scene. Read the SKScene documentation (see the References ). Change the Scenes origin . Set the position of a node using the editor. Understand the sceneDidLoad() , didChangeSize(CGSize:) , willMove(from: SKView) , didMove(to: SKView) functions and how/when to use them. Review the Conforms To and Essentials section of SKScene documentation. Try to configure physics (you will need a node with a physicsbody ). Solutions Coming Soon","title":"Challenges"},{"location":"tutorials/001-FirstProject/#references","text":"SKView Documentation SKScene Documentation SKShapeNode Documentation Google SKScene Origin Creating a SKScene from File Google","title":"References"},{"location":"tutorials/001-FirstProject/#extra-reading","text":"The link below is the documentation explaining different nodes and node types. It is recommended you at least read over the section Using Base Nodes to Lay Out SpriteKit Content and Maximizing Node Drawing Performance to get a general idea of the capabilities of different nodes. Nodes for Scene Building","title":"Extra Reading"},{"location":"tutorials/002-MovingNodes/","text":"SpriteKit Nodes SKNodes can be a large topic. Almost everything that makes a up a game is essentially a node of some sort. In previous tutorials, SKShapeNodes where used to draw a circle to the SKScene . This tutorial will cover drawing SKSpriteNodes and moving them around on the screen. Keep in mind moving nodes around is just one thing that can be done with nodes. Nodes are used for almost everything in games. Getting Started Step 1. Create your project Step 2. Set the UIView to use the SKView class For simplicity everything in this tutorial will stay in the ViewController.swift file. It is recommended a new scene and class be created and used to setup the code examples found in the following sections. All of the items listed above are covered in the previous tutorial in detail. A Scene's Origin A SKScene 's origin is where new nodes will be created. It is also the point from where nodes will be positioned when created. By default the scene's origin ( anchorPoint ) is in the bottom left-hand corner of the screen. A SKScene is also a node, in fact, it is always the root node of a node tree. When children nodes are created they are created at the origin of their parent node. The origin can be set by changing the anchorPoint , property of the scene. 1 scene . anchorPoint = CGPoint ( x : 0.5 , y : 0.5 ) The .anchorPoint property is not in the SKNode class meaning not all nodes will have it, for example the SKShapeNode used in previous tutorials does not have it's own anchorPoint . For deeper details about positioning, origins, and the anchorPoint property see the documentation . Setting Up the Scene In the MyScene.swift file utilize the following code to set up our scene and create a rectangle. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import SpriteKit class MyScene : SKScene { override func didMove () { super . viewDidLoad () if let skView = view as ? SKView { let scene = SKScene ( size : skView . bounds . size ) scene . anchorPoint = CGPoint ( x : 0.5 , y : 0.5 ) // Create a rectangle shape using SKSpriteNode(color:, size: CGSize) let rectangleSprite = SKSpriteNode ( color : . cyan , size : CGSize ( width : 200 , height : 100 )) // print(rectangleSprite.anchorPoint) scene . addChild ( rectangleSprite ) skView . presentScene ( scene ) } } } Compile and run the code ( Cmd + R ) to see the results. Verify the origin of the sprite by removing the commented out print(rectangleSprite.anchorPoint) statement. SKActions SKActions are used to perform actions on a sprite node such as: Moving Rotating Scaling Resizing Scaling Animating There are many other things that can be done with SKActions . For greater details see the Action Initializers section of the SKAction documentation . Getting Help Quickly This is a good point to pause and explain how to get help quickly from in the Xcode editor. The next couple of sections use partial code examples and some may be confusing. For example there will be a .zRotation property that can be modified. This property isn't exactly self-explanatory so being able to reference the relative documentation quickly can be helpful. To do this hover over the method name hold the Option key and click the method name. Animating Sprites Rotating a Sprite There are different ways to rotate sprites. Below are some example methods. See the full code sample section of this tutorial for a full example of these methods. 1 rectangleSprite . zRotation = 1 To rotate a sprite using an SKAction adding the following code to the previous code example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // ... scene . anchorPoint = CGPoint ( x : 0.5 , y : 0.5 ) let rectangleSprite = SKSpriteNode ( color : . cyan , size : CGSize ( width : 200 , height : 100 )) // Create an action to rotate the rectangle by an angle of PI for a time interval of 1 second let rotateAction = SKAction . rotate ( byAngle : . pi , duration : 1 ) // Create an action that will repeat the rotateAction forever let repeatingAction = SKAction . repeatForever ( rotateAction ) // Run the repeatingAction on the rectangleSprite rectangleSprite . run ( repeatingAction ) // The line commented out below is shorthand for the three lines above. // rectangleSprite.run(.repeatForever(.rotate(byAngle: .pi, duration: 1))) scene . addChild ( rectangleSprite ) skView . presentScene ( scene ) // ... Be careful not to confuse .rotate(byAngle:, duration:) with .rotate(toAngle:, duration:) . The SKAction.repeatForever(action:) function will not work with .rotate(toAngle:, duration:) . Using SKAction initializers two actions are created in the code above. The first action, rotateAction uses SKAction.rotate(byAngle:, duration:) to rotate a node counter clockwise by an angle of pi . The duration in the time interval in which the action should complete. In the example above the rectangle should complete one full rotation over a time period of one second. The second SKAction , SKAction.repeatForever(action:) , is used to take the rotateAction and repeat it forever. Scaling Nodes Just like rotating sprites there are different ways to scale down nodes. A few examples are listed below: 1 2 3 4 5 6 7 8 9 // Using the scale(to:) method rectangleSprite . scale ( to : CGSize ( width : 50 , height : 100 )) // Using the setScale(_, scale:) method rectangleSprite . setScale ( CGFloat ( 0.5 )) // Setting the xScale and yScale properties manually. rectangleSprite . xScale = 2 rectangleSprite . yScale = 4 You will notice that when the app loads the rectangle is already scaled and there is no animation. Scaling animations can be achieved using SKActions . 1 rectangleSprite . run (. scale ( by : 2 , duration : 3 )) There are many different ways to scale a sprite using SKActions the above example is not the only way to do it. Refer to the Action Initializers section documentation for more details. Moving Nodes Moving nodes around can be done setting the position property of a node as seen below: 1 rectangleSprite . position = CGPoint ( x : 80 , y : 100 ) Using SKActions movement can be animated. 1 rectangleSprite . run (. moveBy ( x : 80 , y : 100 , duration : 3 )) Once again the SKAction.moveBy(x:, y:, duration:) method is not the only one that can be used to animate sprite movement. Multiple SKActions SKActions can be used to animate many things. Actions can also be combined to use a sequence of actions. This can be used to create better visual effects. For example maybe a player picks up a power up item and it causes the sprite to grow large then small and then large again. This can be achieved using SKActions.sequence(actions: [SKAction]) function. To do this there are some code modifications. Move the creation of the rectangleSprite above the viewDidLoad() method. Then add a new function below the viewDidLoad() method. The movement of the rectangleSprite is so it can be used in the new function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // ... class ViewController : UIViewController { let rectangleSprite = SKSpriteNode ( color : . cyan , size : CGSize ( width : 50 , height : 150 )) override func viewDidLoad () { super . viewDidLoad () //... } func powerUp (){ let growAction = SKAction . scale ( to : 1.5 , duration : 0.25 ) let shrinkAction = SKAction . scale ( to : 1.2 , duration : 0.30 ) let growLargerAction = SKAction . scale ( to : 1.9 , duration : 0.25 ) let shrinkLessAction = SKAction . scale ( to : 1.6 , duration : 0.30 ) let finalGrowthAction = SKAction . scale ( to : 2 , duration : 1 ) let actionSequence = SKAction . sequence ([ growAction , shrinkAction , growLargerAction , shrinkLessAction , finalGrowthAction ]) rectangleSprite . run ( actionSequence ) } } Next call the powerUp() in the viewDidLoad() method. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //... class ViewController : UIViewController { let rectangleSprite = SKSpriteNode ( color : . cyan , size : CGSize ( width : 50 , height : 150 )) override func viewDidLoad () { super . viewDidLoad () //... powerUp () scene . addChild ( rectangleSprite ) //... } //... } Full Code Sample Below is a full code example with some bonus material. It is recommended to uncomment different statements to see what they look like. To uncomment lines quickly move the cursor to the line to uncomment then use holding the Cmd key and pressing / to remove the // characters. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 import UIKit import SpriteKit class ViewController : UIViewController { let rectangleSprite = SKSpriteNode ( color : . cyan , size : CGSize ( width : 50 , height : 150 )) override func viewDidLoad () { super . viewDidLoad () if let skView = view as ? SKView { let scene = SKScene ( size : skView . bounds . size ) scene . anchorPoint = CGPoint ( x : 0.5 , y : 0.5 ) // Repeat a rotation action forever. // rectangleSprite.run(.repeatForever(.rotate(byAngle: .pi, duration: 1))) // Scales the sprite by a factor of 2 for 3 seconds // rectangleSprite.run(.scale(by: 2, duration: 3)) // Move the sprite using an SKAction // rectangleSprite.run(.moveBy(x: 80, y: 100, duration: 2)) // Examples of rotatign sprites // rectangleSprite.zRotation = 1 // Examples of scaling sprites. // rectangleSprite.scale(to: CGSize(width: 50, height: 100)) // rectangleSprite.setScale(CGFloat(0.5)) // rectangleSprite.xScale = 2 // rectangleSprite.yScale = 4 // Examples of moving sprites // rectangleSprite.position = CGPoint(x: 80, y: 100) // Example of growth animation // powerUp() // Example of pulse animation // pulse() // Example of flying death trap // fanOfDoom() scene . addChild ( rectangleSprite ) skView . presentScene ( scene ) } } func powerUp (){ let growAction = SKAction . scale ( to : 1.5 , duration : 0.25 ) let shrinkAction = SKAction . scale ( to : 1.2 , duration : 0.30 ) let growLargerAction = SKAction . scale ( to : 1.9 , duration : 0.25 ) let shrinkLessAction = SKAction . scale ( to : 1.6 , duration : 0.30 ) let finalGrowthAction = SKAction . scale ( to : 2 , duration : 1 ) let actionSequence = SKAction . sequence ([ growAction , shrinkAction , growLargerAction , shrinkLessAction , finalGrowthAction ]) rectangleSprite . run ( actionSequence ) } func pulse (){ let growAction = SKAction . scale ( to : 1.5 , duration : 0.25 ) let shrinkAction = SKAction . scale ( to : 1.2 , duration : 0.35 ) let actionSequence = SKAction . sequence ([ growAction , shrinkAction ]) let repeatingAction = SKAction . repeatForever ( actionSequence ) rectangleSprite . run ( repeatingAction ) } func fanOfDoom (){ let moveAction = SKAction . moveTo ( x : - 120 , duration : 2 ) let moveBackAction = SKAction . moveTo ( x : 120 , duration : 2 ) let rotateAction = SKAction . rotate ( byAngle : . pi * 8 , duration : 4 ) let actionSequence = SKAction . sequence ([ moveAction , moveBackAction ]) // SKAction.group allows actions to run in parallel. let groupOfActions = SKAction . group ([ rotateAction , actionSequence ]) let repeatingAction = SKAction . repeatForever ( groupOfActions ) rectangleSprite . run ( repeatingAction ) } } PowerUp Example Pulse Example Fan of Doom Example Exercises Play around with the full code example. Change the code and SKAction sequences around see what effects can be achieved. Create a new effect. Create a dying animation where the rectangle rotates, shrinks and fades out all at the same time. Solutions Coming Soon References SKScene SKScene Origin SKNodes SKSpriteNodes SKActions","title":"Moving Nodes"},{"location":"tutorials/002-MovingNodes/#spritekit-nodes","text":"SKNodes can be a large topic. Almost everything that makes a up a game is essentially a node of some sort. In previous tutorials, SKShapeNodes where used to draw a circle to the SKScene . This tutorial will cover drawing SKSpriteNodes and moving them around on the screen. Keep in mind moving nodes around is just one thing that can be done with nodes. Nodes are used for almost everything in games.","title":"SpriteKit Nodes"},{"location":"tutorials/002-MovingNodes/#getting-started","text":"Step 1. Create your project Step 2. Set the UIView to use the SKView class For simplicity everything in this tutorial will stay in the ViewController.swift file. It is recommended a new scene and class be created and used to setup the code examples found in the following sections. All of the items listed above are covered in the previous tutorial in detail.","title":"Getting Started"},{"location":"tutorials/002-MovingNodes/#a-scenes-origin","text":"A SKScene 's origin is where new nodes will be created. It is also the point from where nodes will be positioned when created. By default the scene's origin ( anchorPoint ) is in the bottom left-hand corner of the screen. A SKScene is also a node, in fact, it is always the root node of a node tree. When children nodes are created they are created at the origin of their parent node. The origin can be set by changing the anchorPoint , property of the scene. 1 scene . anchorPoint = CGPoint ( x : 0.5 , y : 0.5 ) The .anchorPoint property is not in the SKNode class meaning not all nodes will have it, for example the SKShapeNode used in previous tutorials does not have it's own anchorPoint . For deeper details about positioning, origins, and the anchorPoint property see the documentation .","title":"A Scene's Origin"},{"location":"tutorials/002-MovingNodes/#setting-up-the-scene","text":"In the MyScene.swift file utilize the following code to set up our scene and create a rectangle. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import SpriteKit class MyScene : SKScene { override func didMove () { super . viewDidLoad () if let skView = view as ? SKView { let scene = SKScene ( size : skView . bounds . size ) scene . anchorPoint = CGPoint ( x : 0.5 , y : 0.5 ) // Create a rectangle shape using SKSpriteNode(color:, size: CGSize) let rectangleSprite = SKSpriteNode ( color : . cyan , size : CGSize ( width : 200 , height : 100 )) // print(rectangleSprite.anchorPoint) scene . addChild ( rectangleSprite ) skView . presentScene ( scene ) } } } Compile and run the code ( Cmd + R ) to see the results. Verify the origin of the sprite by removing the commented out print(rectangleSprite.anchorPoint) statement.","title":"Setting Up the Scene"},{"location":"tutorials/002-MovingNodes/#skactions","text":"SKActions are used to perform actions on a sprite node such as: Moving Rotating Scaling Resizing Scaling Animating There are many other things that can be done with SKActions . For greater details see the Action Initializers section of the SKAction documentation .","title":"SKActions"},{"location":"tutorials/002-MovingNodes/#getting-help-quickly","text":"This is a good point to pause and explain how to get help quickly from in the Xcode editor. The next couple of sections use partial code examples and some may be confusing. For example there will be a .zRotation property that can be modified. This property isn't exactly self-explanatory so being able to reference the relative documentation quickly can be helpful. To do this hover over the method name hold the Option key and click the method name.","title":"Getting Help Quickly"},{"location":"tutorials/002-MovingNodes/#animating-sprites","text":"","title":"Animating Sprites"},{"location":"tutorials/002-MovingNodes/#rotating-a-sprite","text":"There are different ways to rotate sprites. Below are some example methods. See the full code sample section of this tutorial for a full example of these methods. 1 rectangleSprite . zRotation = 1 To rotate a sprite using an SKAction adding the following code to the previous code example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // ... scene . anchorPoint = CGPoint ( x : 0.5 , y : 0.5 ) let rectangleSprite = SKSpriteNode ( color : . cyan , size : CGSize ( width : 200 , height : 100 )) // Create an action to rotate the rectangle by an angle of PI for a time interval of 1 second let rotateAction = SKAction . rotate ( byAngle : . pi , duration : 1 ) // Create an action that will repeat the rotateAction forever let repeatingAction = SKAction . repeatForever ( rotateAction ) // Run the repeatingAction on the rectangleSprite rectangleSprite . run ( repeatingAction ) // The line commented out below is shorthand for the three lines above. // rectangleSprite.run(.repeatForever(.rotate(byAngle: .pi, duration: 1))) scene . addChild ( rectangleSprite ) skView . presentScene ( scene ) // ... Be careful not to confuse .rotate(byAngle:, duration:) with .rotate(toAngle:, duration:) . The SKAction.repeatForever(action:) function will not work with .rotate(toAngle:, duration:) . Using SKAction initializers two actions are created in the code above. The first action, rotateAction uses SKAction.rotate(byAngle:, duration:) to rotate a node counter clockwise by an angle of pi . The duration in the time interval in which the action should complete. In the example above the rectangle should complete one full rotation over a time period of one second. The second SKAction , SKAction.repeatForever(action:) , is used to take the rotateAction and repeat it forever.","title":"Rotating a Sprite"},{"location":"tutorials/002-MovingNodes/#scaling-nodes","text":"Just like rotating sprites there are different ways to scale down nodes. A few examples are listed below: 1 2 3 4 5 6 7 8 9 // Using the scale(to:) method rectangleSprite . scale ( to : CGSize ( width : 50 , height : 100 )) // Using the setScale(_, scale:) method rectangleSprite . setScale ( CGFloat ( 0.5 )) // Setting the xScale and yScale properties manually. rectangleSprite . xScale = 2 rectangleSprite . yScale = 4 You will notice that when the app loads the rectangle is already scaled and there is no animation. Scaling animations can be achieved using SKActions . 1 rectangleSprite . run (. scale ( by : 2 , duration : 3 )) There are many different ways to scale a sprite using SKActions the above example is not the only way to do it. Refer to the Action Initializers section documentation for more details.","title":"Scaling Nodes"},{"location":"tutorials/002-MovingNodes/#moving-nodes","text":"Moving nodes around can be done setting the position property of a node as seen below: 1 rectangleSprite . position = CGPoint ( x : 80 , y : 100 ) Using SKActions movement can be animated. 1 rectangleSprite . run (. moveBy ( x : 80 , y : 100 , duration : 3 )) Once again the SKAction.moveBy(x:, y:, duration:) method is not the only one that can be used to animate sprite movement.","title":"Moving Nodes"},{"location":"tutorials/002-MovingNodes/#multiple-skactions","text":"SKActions can be used to animate many things. Actions can also be combined to use a sequence of actions. This can be used to create better visual effects. For example maybe a player picks up a power up item and it causes the sprite to grow large then small and then large again. This can be achieved using SKActions.sequence(actions: [SKAction]) function. To do this there are some code modifications. Move the creation of the rectangleSprite above the viewDidLoad() method. Then add a new function below the viewDidLoad() method. The movement of the rectangleSprite is so it can be used in the new function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // ... class ViewController : UIViewController { let rectangleSprite = SKSpriteNode ( color : . cyan , size : CGSize ( width : 50 , height : 150 )) override func viewDidLoad () { super . viewDidLoad () //... } func powerUp (){ let growAction = SKAction . scale ( to : 1.5 , duration : 0.25 ) let shrinkAction = SKAction . scale ( to : 1.2 , duration : 0.30 ) let growLargerAction = SKAction . scale ( to : 1.9 , duration : 0.25 ) let shrinkLessAction = SKAction . scale ( to : 1.6 , duration : 0.30 ) let finalGrowthAction = SKAction . scale ( to : 2 , duration : 1 ) let actionSequence = SKAction . sequence ([ growAction , shrinkAction , growLargerAction , shrinkLessAction , finalGrowthAction ]) rectangleSprite . run ( actionSequence ) } } Next call the powerUp() in the viewDidLoad() method. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //... class ViewController : UIViewController { let rectangleSprite = SKSpriteNode ( color : . cyan , size : CGSize ( width : 50 , height : 150 )) override func viewDidLoad () { super . viewDidLoad () //... powerUp () scene . addChild ( rectangleSprite ) //... } //... }","title":"Multiple SKActions"},{"location":"tutorials/002-MovingNodes/#full-code-sample","text":"Below is a full code example with some bonus material. It is recommended to uncomment different statements to see what they look like. To uncomment lines quickly move the cursor to the line to uncomment then use holding the Cmd key and pressing / to remove the // characters. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 import UIKit import SpriteKit class ViewController : UIViewController { let rectangleSprite = SKSpriteNode ( color : . cyan , size : CGSize ( width : 50 , height : 150 )) override func viewDidLoad () { super . viewDidLoad () if let skView = view as ? SKView { let scene = SKScene ( size : skView . bounds . size ) scene . anchorPoint = CGPoint ( x : 0.5 , y : 0.5 ) // Repeat a rotation action forever. // rectangleSprite.run(.repeatForever(.rotate(byAngle: .pi, duration: 1))) // Scales the sprite by a factor of 2 for 3 seconds // rectangleSprite.run(.scale(by: 2, duration: 3)) // Move the sprite using an SKAction // rectangleSprite.run(.moveBy(x: 80, y: 100, duration: 2)) // Examples of rotatign sprites // rectangleSprite.zRotation = 1 // Examples of scaling sprites. // rectangleSprite.scale(to: CGSize(width: 50, height: 100)) // rectangleSprite.setScale(CGFloat(0.5)) // rectangleSprite.xScale = 2 // rectangleSprite.yScale = 4 // Examples of moving sprites // rectangleSprite.position = CGPoint(x: 80, y: 100) // Example of growth animation // powerUp() // Example of pulse animation // pulse() // Example of flying death trap // fanOfDoom() scene . addChild ( rectangleSprite ) skView . presentScene ( scene ) } } func powerUp (){ let growAction = SKAction . scale ( to : 1.5 , duration : 0.25 ) let shrinkAction = SKAction . scale ( to : 1.2 , duration : 0.30 ) let growLargerAction = SKAction . scale ( to : 1.9 , duration : 0.25 ) let shrinkLessAction = SKAction . scale ( to : 1.6 , duration : 0.30 ) let finalGrowthAction = SKAction . scale ( to : 2 , duration : 1 ) let actionSequence = SKAction . sequence ([ growAction , shrinkAction , growLargerAction , shrinkLessAction , finalGrowthAction ]) rectangleSprite . run ( actionSequence ) } func pulse (){ let growAction = SKAction . scale ( to : 1.5 , duration : 0.25 ) let shrinkAction = SKAction . scale ( to : 1.2 , duration : 0.35 ) let actionSequence = SKAction . sequence ([ growAction , shrinkAction ]) let repeatingAction = SKAction . repeatForever ( actionSequence ) rectangleSprite . run ( repeatingAction ) } func fanOfDoom (){ let moveAction = SKAction . moveTo ( x : - 120 , duration : 2 ) let moveBackAction = SKAction . moveTo ( x : 120 , duration : 2 ) let rotateAction = SKAction . rotate ( byAngle : . pi * 8 , duration : 4 ) let actionSequence = SKAction . sequence ([ moveAction , moveBackAction ]) // SKAction.group allows actions to run in parallel. let groupOfActions = SKAction . group ([ rotateAction , actionSequence ]) let repeatingAction = SKAction . repeatForever ( groupOfActions ) rectangleSprite . run ( repeatingAction ) } } PowerUp Example Pulse Example Fan of Doom Example","title":"Full Code Sample"},{"location":"tutorials/002-MovingNodes/#exercises","text":"Play around with the full code example. Change the code and SKAction sequences around see what effects can be achieved. Create a new effect. Create a dying animation where the rectangle rotates, shrinks and fades out all at the same time. Solutions Coming Soon","title":"Exercises"},{"location":"tutorials/002-MovingNodes/#references","text":"SKScene SKScene Origin SKNodes SKSpriteNodes SKActions","title":"References"}]}