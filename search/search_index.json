{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Swift Game Dev Welcome to Swift Game Dev! This site aims to teach a wide array of game development topics in the iOS game ecosystem. To get started goto the tutorials section in the left-hand menu and select the framework of interest. Under Construction.","title":"Home"},{"location":"#welcome-swift-game-dev","text":"Welcome to Swift Game Dev! This site aims to teach a wide array of game development topics in the iOS game ecosystem. To get started goto the tutorials section in the left-hand menu and select the framework of interest. Under Construction.","title":"Welcome Swift Game Dev"},{"location":"about/","text":"About SwiftGameDev is a site that aims to deliver high-quality tutorials for creating games with SwiftUI, UIKit, Spritekit, Scenekit, and ARkit. In the future, this site may contain tutorials for Godot, game art creation, and a broad range of topics around the world of game development. So stay tuned and visit the page every once in a while. That's about it for now. Good luck on your game development journey.","title":"About"},{"location":"about/#about","text":"SwiftGameDev is a site that aims to deliver high-quality tutorials for creating games with SwiftUI, UIKit, Spritekit, Scenekit, and ARkit. In the future, this site may contain tutorials for Godot, game art creation, and a broad range of topics around the world of game development. So stay tuned and visit the page every once in a while. That's about it for now. Good luck on your game development journey.","title":"About"},{"location":"tutorials/001-FirstProject/","text":"Getting Started Apple describes Spritekit as a general-purpose framework for drawing shapes, particles, text, images, and video in two dimensions. It leverages Metal to achieve high-performance rendering while offering a simple programming interface to make it easy to create games and other graphics-intensive apps. Using a rich set of animations and physics behaviors, you can quickly add life to your visual elements and gracefully transition between screens. Quick Word Welcome to the first step in beginning your iOS game development journey. I hope this will be as much a learning experience for anyone reading this as it will be for myself. I will assume that you have some prior experience with iOS development. Below are some highly recommended references if you don't have previous experience. Course Description Angela Yu's Udemy Course One of the best places to start learning iOS development. The course stays updated, is of high quality, and the teaching style is at a pace that anyone could keep up. Stanford University CS193p 2017-2018 This is an excellent resource to learn iOS development. Stanford University CS193p 2020 This is a faster-paced course but covers things in great detail. The course focuses on SwiftUI. Hacking With Swift Search anything involving Swift HackingWithSwift will appear. The content is high quality. Ray Wenderlinch A site much like HackingWithSwift. There is high-quality content here. Do not try to consume everything from every link listed above. Doing so will burn anyone out with little to no progress. The best thing to do is learn concepts and then put those concepts to practice. Your First Project This first project will be something simple. The goal is to draw a scene and a shape. We are going to create a Single View App then add Spritekit to it. The process for adding Spritekit to a project is described in Apple's Developer Documentation but is difficult to follow. I recommend you read the page linked after this tutorial and try to understand it. Get Xcode The first thing to do is ensure you have Xcode downloaded and installed. Creating the Project Now let's create a project. You can follow the gif below to see how to do that. The steps are as follows: 1. Open Xcode 2. Create a new project 3. Select IOS 4. Select App 5. Fill out the required fields Product Name: WhateverYouWant Team: WhatEverYouWant Organizational Identifier: com.whateverYouWant Interface: Storyboard Lifecycle: UIKit App Delegate Language: Swift The SKView Class In Apple's documentation, they walk you through creating a Scene, drawing a node, and finally presenting the scene. They don't explain setting up the View that you present. The View needs to be of class SKView . Setup SKView There are two ways to set the View as a SKView . The first is to go to your Main.Storyboard file and select the main View and change its class to SKView as seen in the images below. You can set the View programmatically as well. I don't recommend the programmatic approach because I've run into bugs with it. To The Code Navigate to the ViewController.swift file you will see code very similar to the following: import UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view. } } Integrating Spritekit The first thing to do is integrate Spritekit into our project. Using the import Spritekit statement import the framework into the project. import UIKit // Import Spritekit here import Spritekit class ViewController: UIViewController { //... } Creating the Scene As explained in Apple's Developer Documentation: \"Everything displayed with SpriteKit is done through a scene object, which is an instance of SKScene .\" To set up a SKScene use the following code. import UIKit import Spritekit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() // Check the view to ensure it is of type SKView if let skView = view as? SKView { // Initialize a SKScene object. By passing the size of the view's bounds the scene will fit to the screen. let scene = SKScene(size: skView.bounds.size) // Present the scene skView.presentScene(scene) } } } Adding a Node Compile and run your code using Cmd + R . You should see an empty grey screen. Ready to add something to the scene? Using SKShapeNode create a circle using the following code. import UIKit import SpriteKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() if let skView = view as? SKView { let scene = SKScene(size: skView.bounds.size) // Set the scene's anchor point to the center of the screen. scene.anchorPoint = CGPoint(x: 0.5, y: 0.5) // Create an SKShapeNode with a circleOfRadius of 25 let roundThing = SKShapeNode(circleOfRadius: 25) // Set the fill color of the SKShapeNode to red roundThing.fillColor = .red // Add the SKShapeNode to the scene. scene.addChild(roundThing) skView.presentScene(scene) } } } Congratulations You have completed the first project. You have something to show! Getting this far takes a lot of work. You are already miles ahead of anyone else that said \" I want to make games \" and never put in the effort. Here are some exercises I recommend trying. Remember, documentation and Google are tools. Utilize them. There is no shame in it. It is counterproductive to bang your head against a wall figuring out how to do something when you can look it up in seconds. The references will help guide you through the exercises. Challenges Change the color of the circle Change the border color of the circle Change the background color of the scene Add a square shape to the scene Change the position of the shapes Solutions Coming Soon References SKView Documentation SKScene Documentation SKShapeNode Documentation Contains All Answers to the Exercises","title":"Your First Project"},{"location":"tutorials/001-FirstProject/#getting-started","text":"Apple describes Spritekit as a general-purpose framework for drawing shapes, particles, text, images, and video in two dimensions. It leverages Metal to achieve high-performance rendering while offering a simple programming interface to make it easy to create games and other graphics-intensive apps. Using a rich set of animations and physics behaviors, you can quickly add life to your visual elements and gracefully transition between screens.","title":"Getting Started"},{"location":"tutorials/001-FirstProject/#quick-word","text":"Welcome to the first step in beginning your iOS game development journey. I hope this will be as much a learning experience for anyone reading this as it will be for myself. I will assume that you have some prior experience with iOS development. Below are some highly recommended references if you don't have previous experience. Course Description Angela Yu's Udemy Course One of the best places to start learning iOS development. The course stays updated, is of high quality, and the teaching style is at a pace that anyone could keep up. Stanford University CS193p 2017-2018 This is an excellent resource to learn iOS development. Stanford University CS193p 2020 This is a faster-paced course but covers things in great detail. The course focuses on SwiftUI. Hacking With Swift Search anything involving Swift HackingWithSwift will appear. The content is high quality. Ray Wenderlinch A site much like HackingWithSwift. There is high-quality content here. Do not try to consume everything from every link listed above. Doing so will burn anyone out with little to no progress. The best thing to do is learn concepts and then put those concepts to practice.","title":"Quick Word"},{"location":"tutorials/001-FirstProject/#your-first-project","text":"This first project will be something simple. The goal is to draw a scene and a shape. We are going to create a Single View App then add Spritekit to it. The process for adding Spritekit to a project is described in Apple's Developer Documentation but is difficult to follow. I recommend you read the page linked after this tutorial and try to understand it.","title":"Your First Project"},{"location":"tutorials/001-FirstProject/#get-xcode","text":"The first thing to do is ensure you have Xcode downloaded and installed.","title":"Get Xcode"},{"location":"tutorials/001-FirstProject/#creating-the-project","text":"Now let's create a project. You can follow the gif below to see how to do that. The steps are as follows: 1. Open Xcode 2. Create a new project 3. Select IOS 4. Select App 5. Fill out the required fields Product Name: WhateverYouWant Team: WhatEverYouWant Organizational Identifier: com.whateverYouWant Interface: Storyboard Lifecycle: UIKit App Delegate Language: Swift","title":"Creating the Project"},{"location":"tutorials/001-FirstProject/#the-skview-class","text":"In Apple's documentation, they walk you through creating a Scene, drawing a node, and finally presenting the scene. They don't explain setting up the View that you present. The View needs to be of class SKView .","title":"The SKView Class"},{"location":"tutorials/001-FirstProject/#setup-skview","text":"There are two ways to set the View as a SKView . The first is to go to your Main.Storyboard file and select the main View and change its class to SKView as seen in the images below. You can set the View programmatically as well. I don't recommend the programmatic approach because I've run into bugs with it.","title":"Setup SKView"},{"location":"tutorials/001-FirstProject/#to-the-code","text":"Navigate to the ViewController.swift file you will see code very similar to the following: import UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view. } }","title":"To The Code"},{"location":"tutorials/001-FirstProject/#integrating-spritekit","text":"The first thing to do is integrate Spritekit into our project. Using the import Spritekit statement import the framework into the project. import UIKit // Import Spritekit here import Spritekit class ViewController: UIViewController { //... }","title":"Integrating Spritekit"},{"location":"tutorials/001-FirstProject/#creating-the-scene","text":"As explained in Apple's Developer Documentation: \"Everything displayed with SpriteKit is done through a scene object, which is an instance of SKScene .\" To set up a SKScene use the following code. import UIKit import Spritekit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() // Check the view to ensure it is of type SKView if let skView = view as? SKView { // Initialize a SKScene object. By passing the size of the view's bounds the scene will fit to the screen. let scene = SKScene(size: skView.bounds.size) // Present the scene skView.presentScene(scene) } } }","title":"Creating the Scene"},{"location":"tutorials/001-FirstProject/#adding-a-node","text":"Compile and run your code using Cmd + R . You should see an empty grey screen. Ready to add something to the scene? Using SKShapeNode create a circle using the following code. import UIKit import SpriteKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() if let skView = view as? SKView { let scene = SKScene(size: skView.bounds.size) // Set the scene's anchor point to the center of the screen. scene.anchorPoint = CGPoint(x: 0.5, y: 0.5) // Create an SKShapeNode with a circleOfRadius of 25 let roundThing = SKShapeNode(circleOfRadius: 25) // Set the fill color of the SKShapeNode to red roundThing.fillColor = .red // Add the SKShapeNode to the scene. scene.addChild(roundThing) skView.presentScene(scene) } } }","title":"Adding a Node"},{"location":"tutorials/001-FirstProject/#congratulations","text":"You have completed the first project. You have something to show! Getting this far takes a lot of work. You are already miles ahead of anyone else that said \" I want to make games \" and never put in the effort. Here are some exercises I recommend trying. Remember, documentation and Google are tools. Utilize them. There is no shame in it. It is counterproductive to bang your head against a wall figuring out how to do something when you can look it up in seconds. The references will help guide you through the exercises.","title":"Congratulations"},{"location":"tutorials/001-FirstProject/#challenges","text":"Change the color of the circle Change the border color of the circle Change the background color of the scene Add a square shape to the scene Change the position of the shapes Solutions Coming Soon","title":"Challenges"},{"location":"tutorials/001-FirstProject/#references","text":"SKView Documentation SKScene Documentation SKShapeNode Documentation Contains All Answers to the Exercises","title":"References"},{"location":"tutorials/002-TheSKScene/","text":"The SKScene Class A SKScene object represents a scene of content in Spritekit. A scene is the root node in a tree of Spritekit nodes ( SKNodes ). The nodes provide content that the scene animates and renders for display. SKScene is a subclass of SKEffectNode and enables certain effect to apply to the entire scene. Enabling effects across an entire scene may be an expensive operation so use this cautiously. Creating a Scene File In the last tutorial a SKScene was created programmatically. This time the SKScene will be created from an .sks scene file. Step 1. Start by creating a new Single App View project as done in the previous tutorial. Step 2. Set the UIView to use the SKView class in the Main.Storyboard file. Step 3. Import Spritekit into your project using the import Spritekit statement within the ViewController.swift file. import UIKit import Spritekit //... To create a .sks scene file press Cmd + N enter scene in the filter and select Spritekit Scene . Careful not to select Scenekit Scene . This will put you in Xcode's scene editor. This is where base scene configuration should take place when possible. Modifying the Scene It is faster to edit the base scene from the editor and it cuts down on code pollution in the source files. Take some time to explore and get a feel for what can be done with the editor. For example changing the background color can be done by clicking the Attributes Inspector and selecting the color your the color attributes. Linking the Scene Now to link the file up to the code. Navigate back to the ViewController.swift file and use the following code. import UIKit import SpriteKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() if let skView = view as? SKView { // Use the SKScene(fileName:) function to load the scene. // The string \"MyScene\" comes from the name of the sks file. // So if the name of the file was Level01.sks you would replace \"MyScene\" with \"Level01\" let scene = SKScene(fileNamed: \"MyScene\") // Present the scene skView.presentScene(scene) } } } The code above looks almost identical to the code in the previous tutorial. The exception is the SKScene function is initialized with the filename of the .sks file. Hitting the Cmd + R keys will compile and run your code. This time the background should be the same color chosen from the attributes tab in the .sks file. It may take a few seconds to load up the first time it is ran so be patient. It should not take longer the a minute. Adding Sprite's to the Scene You can can sprites and nodes to the scene using the editor as well. Back in the .sks file click the + button in the upper right hand corner of the scene editor. Watch the above animation carefully and notice that when the Circle Sprite is placed it has a square shape. The reason for this is explained in a later tutorial. Notice also that the context of the attributes editor changes when selecting a node. This allows for different aspects of the node to be modified. The Scene's Node Tree When building the scene you want to keep nodes organized in larger projects. The editor allows you to visualize your nodes in a tree-like structure. Nodes can be nested and organized. When a node is nested below another node it becomes a child or it's parent node. Things like inheritance for certain attributes take place unless overridden by the child node. These are important concepts to keep in mind. Congratulations You made it through another tutorial. I hope you have a good understanding of SKScenes and how to change a scene's attribute, add nodes, and change attributes of those nodes. There are many things you can do with the SKScene object: Stretch the Content to Fit the View Configure the ViewPort (Define what part of the scene is visible at a given time) Respond to loading and resizing events Respond to Frame-Cycle events Delegating a scene Change background appearance Configure Physics Add positional audio Note that a SKScene inherits from the SKEffectNode . That means anything that can be done with the SKEffectNode can be performed on a SKScene . These action can include: Apply Core Image Filters Warping Nodes Applying Shaders Flatten Node Tree's for improved performance Configure Alpha blending In the next tutorial we will be adding some movement to a SKShapeNode . Exercises These exercises may seem a bit dull but they are beneficial. Don't try to memorize everything. The documentation is there for a reference when needed. Do put what you learn to practice while learning it. This will re-enforce the concepts. The same principle applies for learning any skill. Create a new scene with a different background color Read the SKScene Documentation (see the References ) Change the Scenes origin Set the position of a node using the editor Try to configure physics (you will need a node with a physicsbody ) Understand the sceneDidLoad() , didChangeSize(CGSize:) , willMove(from: SKView) , didMove(to: SKView) functions and how/when to use them Review the Conforms To and Essentials section of SKScene documentation Bonus points for getting audio to work Make it through all of the exercises and still don't understand something? That is OK. Understanding comes with time. Future tutorials will cover each of these items in greater detail. Solutions Coming Soon References SKScene Documentation SKScene Origin Creating a SKScene from File Contains All Answers to the Exercises Extra Reading The link below is the documentation explaining different nodes and node types. It is recommended you at least read over the section Using Base Nodes to Lay Out SpriteKit Content and Maximizing Node Drawing Performance to get a general idea of the capabilities of different nodes. Nodes for Scene Building","title":"The SKScene Class"},{"location":"tutorials/002-TheSKScene/#the-skscene-class","text":"A SKScene object represents a scene of content in Spritekit. A scene is the root node in a tree of Spritekit nodes ( SKNodes ). The nodes provide content that the scene animates and renders for display. SKScene is a subclass of SKEffectNode and enables certain effect to apply to the entire scene. Enabling effects across an entire scene may be an expensive operation so use this cautiously.","title":"The SKScene Class"},{"location":"tutorials/002-TheSKScene/#creating-a-scene-file","text":"In the last tutorial a SKScene was created programmatically. This time the SKScene will be created from an .sks scene file. Step 1. Start by creating a new Single App View project as done in the previous tutorial. Step 2. Set the UIView to use the SKView class in the Main.Storyboard file. Step 3. Import Spritekit into your project using the import Spritekit statement within the ViewController.swift file. import UIKit import Spritekit //... To create a .sks scene file press Cmd + N enter scene in the filter and select Spritekit Scene . Careful not to select Scenekit Scene . This will put you in Xcode's scene editor. This is where base scene configuration should take place when possible.","title":"Creating a Scene File"},{"location":"tutorials/002-TheSKScene/#modifying-the-scene","text":"It is faster to edit the base scene from the editor and it cuts down on code pollution in the source files. Take some time to explore and get a feel for what can be done with the editor. For example changing the background color can be done by clicking the Attributes Inspector and selecting the color your the color attributes.","title":"Modifying the Scene"},{"location":"tutorials/002-TheSKScene/#linking-the-scene","text":"Now to link the file up to the code. Navigate back to the ViewController.swift file and use the following code. import UIKit import SpriteKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() if let skView = view as? SKView { // Use the SKScene(fileName:) function to load the scene. // The string \"MyScene\" comes from the name of the sks file. // So if the name of the file was Level01.sks you would replace \"MyScene\" with \"Level01\" let scene = SKScene(fileNamed: \"MyScene\") // Present the scene skView.presentScene(scene) } } } The code above looks almost identical to the code in the previous tutorial. The exception is the SKScene function is initialized with the filename of the .sks file. Hitting the Cmd + R keys will compile and run your code. This time the background should be the same color chosen from the attributes tab in the .sks file. It may take a few seconds to load up the first time it is ran so be patient. It should not take longer the a minute.","title":"Linking the Scene"},{"location":"tutorials/002-TheSKScene/#adding-sprites-to-the-scene","text":"You can can sprites and nodes to the scene using the editor as well. Back in the .sks file click the + button in the upper right hand corner of the scene editor. Watch the above animation carefully and notice that when the Circle Sprite is placed it has a square shape. The reason for this is explained in a later tutorial. Notice also that the context of the attributes editor changes when selecting a node. This allows for different aspects of the node to be modified.","title":"Adding Sprite's to the Scene"},{"location":"tutorials/002-TheSKScene/#the-scenes-node-tree","text":"When building the scene you want to keep nodes organized in larger projects. The editor allows you to visualize your nodes in a tree-like structure. Nodes can be nested and organized. When a node is nested below another node it becomes a child or it's parent node. Things like inheritance for certain attributes take place unless overridden by the child node. These are important concepts to keep in mind.","title":"The Scene's Node Tree"},{"location":"tutorials/002-TheSKScene/#congratulations","text":"You made it through another tutorial. I hope you have a good understanding of SKScenes and how to change a scene's attribute, add nodes, and change attributes of those nodes. There are many things you can do with the SKScene object: Stretch the Content to Fit the View Configure the ViewPort (Define what part of the scene is visible at a given time) Respond to loading and resizing events Respond to Frame-Cycle events Delegating a scene Change background appearance Configure Physics Add positional audio Note that a SKScene inherits from the SKEffectNode . That means anything that can be done with the SKEffectNode can be performed on a SKScene . These action can include: Apply Core Image Filters Warping Nodes Applying Shaders Flatten Node Tree's for improved performance Configure Alpha blending In the next tutorial we will be adding some movement to a SKShapeNode .","title":"Congratulations"},{"location":"tutorials/002-TheSKScene/#exercises","text":"These exercises may seem a bit dull but they are beneficial. Don't try to memorize everything. The documentation is there for a reference when needed. Do put what you learn to practice while learning it. This will re-enforce the concepts. The same principle applies for learning any skill. Create a new scene with a different background color Read the SKScene Documentation (see the References ) Change the Scenes origin Set the position of a node using the editor Try to configure physics (you will need a node with a physicsbody ) Understand the sceneDidLoad() , didChangeSize(CGSize:) , willMove(from: SKView) , didMove(to: SKView) functions and how/when to use them Review the Conforms To and Essentials section of SKScene documentation Bonus points for getting audio to work Make it through all of the exercises and still don't understand something? That is OK. Understanding comes with time. Future tutorials will cover each of these items in greater detail. Solutions Coming Soon","title":"Exercises"},{"location":"tutorials/002-TheSKScene/#references","text":"SKScene Documentation SKScene Origin Creating a SKScene from File Contains All Answers to the Exercises","title":"References"},{"location":"tutorials/002-TheSKScene/#extra-reading","text":"The link below is the documentation explaining different nodes and node types. It is recommended you at least read over the section Using Base Nodes to Lay Out SpriteKit Content and Maximizing Node Drawing Performance to get a general idea of the capabilities of different nodes. Nodes for Scene Building","title":"Extra Reading"},{"location":"tutorials/003-MovingNodes/","text":"SpriteKit Nodes SKNodes can be a large topic. Almost everything that makes a up a game is essentially a node of some sort. In previous tutorials, SKShapeNodes where used to draw a circle or square to the SKScene . This tutorial will cover drawing SKSpriteNodes and moving them around on the screen. Keep in mind moving nodes around is just one thing that can be done with nodes. Nodes are used for almost everything in games. Getting Started Step 1. Create your project Step 2. Set the UIView to use the SKView class A Scene's Origin A SKScene's origin is where new nodes will be created. It is also the point from where nodes will be positioned. By default the scene's origin ( anchorPoint ) is in the bottom left-hand corner of the screen. A SKScene is also a node, in fact, it is always the root node of a node tree. Children nodes are created at the origin of its parent node. With all that in mind if a new node is created it will appear at the parent node's origin, in this case, the SKScene is the parent. This point can be set by changing the origin anchorPoint property of the scene. Set the anchorPoint property to change the location of the origin using scene.anchorPoint = CGPoint(x: 0.5, y: 0.5) . The .anchorPoint property is not in the SKNode class meaning not all nodes will have an anchorPoint property, for example the SKShapeNode used in previous tutorials does not have it's own anchorPoint . For deeper details about positioning, origins, and the anchorPoint property read this article from Apple's documentation. Setting Up the Scene This code utilizes SKSpriteNode to create the rectangle. Once a sprite is in place it can be animated to perform actions. More information on SKSpriteNodes can be found in the documentation . More on this topic will be covered in future tutorials as well. Back in the ViewController.swift file utilize the following code to set up our scene. import UIKit import SpriteKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() if let skView = view as? SKView { let scene = SKScene(size: skView.bounds.size) scene.anchorPoint = CGPoint(x: 0.5, y: 0.5) // Create a rectangle shape using SKSpriteNode(color:, size: CGSize) let rectangleSprite = SKSpriteNode(color: .cyan, size: CGSize(width: 200, height: 100)) // print(rectangleSprite.anchorPoint) scene.addChild(rectangleSprite) skView.presentScene(scene) } } } Compile and run the code ( Cmd + R ) to see the results. Verify the origin of the sprite by removing the commented out print(rectangleSprite.anchorPoint) statement. SKActions SKActions are used to perform actions on a sprite node such as: Moving Rotating Scaling Resizing Scaling Animating There are many other things that can be done with SKActions . For greater details see the Action Initializers section of the SKAction documentation . Getting Help Quickly This is a good point to pause and explain how to get help quickly from in the Xcode editor. The next couple of sections use partial code examples and some may be confusing. For example there will be a .zRotation property that can be modified. This method isn't exactly self explanatory so being able to reference the relative documentation quickly can be helpful. To do this hover over the method name hold the Option key and click the method name. Animating Sprites Rotating a Sprite There are different ways to rotate sprites. Below are some example methods. See the full code sample section of this tutorial for a full example of these methods. rectangleSprite.zRotation = 1 To rotate a sprite using an SKAction adding the following code to the previous code example: // ... scene.anchorPoint = CGPoint(x: 0.5, y: 0.5) let rectangleSprite = SKSpriteNode(color: .cyan, size: CGSize(width: 200, height: 100)) // Create an action to rotate the rectangle by an angle of PI for a time interval of 1 second let rotateAction = SKAction.rotate(byAngle: .pi, duration: 1) // Create an action that will repeat the rotateAction forever let repeatingAction = SKAction.repeatForever(rotateAction) // Run the repeatingAction on the rectangleSprite rectangleSprite.run(repeatingAction) // The line commented out below is shorthand for the three lines above. // rectangleSprite.run(.repeatForever(.rotate(byAngle: .pi, duration: 1))) scene.addChild(rectangleSprite) skView.presentScene(scene) // ... Be careful not to confuse .rotate(byAngle:, duration:) with .rotate(toAngle:, duration:) . The SKAction.repeatForever(action:) function will not work with .rotate(toAngle:, duration:) . Using SKAction initializers two actions are created in the code above. The first action, rotateAction uses SKAction.rotate(byAngle:, duration:) to rotate a node counter clockwise by an angle of pi . The duration in the time interval in which the action should complete. In the example above the rectangle should complete one full rotation over a time period of one second. The second SKAction , SKAction.repeatForever(action:) , is used to take the rotateAction and repeat it forever. Scaling Nodes Just like rotating sprites there are different ways to scale down nodes. A few examples are listed below: // Using the scale(to:) method rectangleSprite.scale(to: CGSize(width: 50, height: 100)) // Using the setScale(_, scale:) method rectangleSprite.setScale(CGFloat(0.5)) // Setting the xScale and yScale properties manually. rectangleSprite.xScale = 2 rectangleSprite.yScale = 4 You will notice that when the app loads the rectangle is already scaled and there is no animation. Scaling animations can be achieved using SKActions . rectangleSprite.run(.scale(by: 2, duration: 3)) There are many different ways to scale a sprite using SKActions the above example is not the only way to do it. Refer to the Action Initializers section documentation for more details. Moving Nodes Moving nodes around can be done setting the position property of a node as seen below: rectangleSprite.position = CGPoint(x: 80, y: 100) Using SKActions movement can be animated. rectangleSprite.run(.moveBy(x: 80, y: 100, duration: 3)) Once again the SKAction.moveBy(x:, y:, duration:) method is not the only one that can be used to animate sprite movement. Multiple SKActions SKActions can be used to animate many things. Actions can also be combined to use a sequence of actions. This can be used to create better visual effects. For example maybe a player picks up a power up item and it causes the sprite to grow large then small and then large again. This can be achieved using SKActions.sequence(actions: [SKAction]) function. To do this there are some code modifications. Move the creation of the rectangleSprite above the viewDidLoad() method. Then add a new function below the viewDidLoad() method. The movement of the rectangleSprite is so it can be used in the new function. // ... class ViewController: UIViewController { let rectangleSprite = SKSpriteNode(color: .cyan, size: CGSize(width: 50, height: 150)) override func viewDidLoad() { super.viewDidLoad() //... } func powerUp(){ let growAction = SKAction.scale(to: 1.5, duration: 0.25) let shrinkAction = SKAction.scale(to: 1.2, duration: 0.30) let growLargerAction = SKAction.scale(to: 1.9, duration: 0.25) let shrinkLessAction = SKAction.scale(to: 1.6, duration: 0.30) let finalGrowthAction = SKAction.scale(to: 2, duration: 1) let actionSequence = SKAction.sequence([growAction, shrinkAction, growLargerAction, shrinkLessAction, finalGrowthAction]) rectangleSprite.run(actionSequence) } } Next call the powerUp() in the viewDidLoad() method. //... class ViewController: UIViewController { let rectangleSprite = SKSpriteNode(color: .cyan, size: CGSize(width: 50, height: 150)) override func viewDidLoad() { super.viewDidLoad() //... powerUp() scene.addChild(rectangleSprite) //... } //... } Full Code Sample Below is a full code example with some bonus material. It is recommended to uncomment different statements to see what they look like. To uncomment lines quickly move the cursor to the line to uncomment then use holding the Cmd key and pressing / to remove the // characters. import UIKit import SpriteKit class ViewController: UIViewController { let rectangleSprite = SKSpriteNode(color: .cyan, size: CGSize(width: 50, height: 150)) override func viewDidLoad() { super.viewDidLoad() if let skView = view as? SKView { let scene = SKScene(size: skView.bounds.size) scene.anchorPoint = CGPoint(x: 0.5, y: 0.5) // Repeat a rotation action forever. // rectangleSprite.run(.repeatForever(.rotate(byAngle: .pi, duration: 1))) // Scales the sprite by a factor of 2 for 3 seconds // rectangleSprite.run(.scale(by: 2, duration: 3)) // Move the sprite using an SKAction // rectangleSprite.run(.moveBy(x: 80, y: 100, duration: 2)) // Examples of rotatign sprites // rectangleSprite.zRotation = 1 // Examples of scaling sprites. // rectangleSprite.scale(to: CGSize(width: 50, height: 100)) // rectangleSprite.setScale(CGFloat(0.5)) // rectangleSprite.xScale = 2 // rectangleSprite.yScale = 4 // Examples of moving sprites // rectangleSprite.position = CGPoint(x: 80, y: 100) // Example of growth animation // powerUp() // Example of pulse animation // pulse() // Example of flying death trap // fanOfDoom() scene.addChild(rectangleSprite) skView.presentScene(scene) } } func powerUp(){ let growAction = SKAction.scale(to: 1.5, duration: 0.25) let shrinkAction = SKAction.scale(to: 1.2, duration: 0.30) let growLargerAction = SKAction.scale(to: 1.9, duration: 0.25) let shrinkLessAction = SKAction.scale(to: 1.6, duration: 0.30) let finalGrowthAction = SKAction.scale(to: 2, duration: 1) let actionSequence = SKAction.sequence([growAction, shrinkAction, growLargerAction, shrinkLessAction, finalGrowthAction]) rectangleSprite.run(actionSequence) } func pulse(){ let growAction = SKAction.scale(to: 1.5, duration: 0.25) let shrinkAction = SKAction.scale(to: 1.2, duration: 0.35) let actionSequence = SKAction.sequence([growAction, shrinkAction]) let repeatingAction = SKAction.repeatForever(actionSequence) rectangleSprite.run(repeatingAction) } func fanOfDoom(){ let moveAction = SKAction.moveTo(x: -120, duration: 2) let moveBackAction = SKAction.moveTo(x: 120, duration: 2) let rotateAction = SKAction.rotate(byAngle: .pi*8, duration: 4) let actionSequence = SKAction.sequence([moveAction, moveBackAction]) // SKAction.group allows actions to run in parallel. let groupOfActions = SKAction.group([rotateAction, actionSequence]) let repeatingAction = SKAction.repeatForever(groupOfActions) rectangleSprite.run(repeatingAction) } } Exercises Play around with the full code example Change the code and SKAction sequences around see what effects can be achieved Create a new effect Create a dying animation where the rectangle rotates, shrinks and fades out all at the same time Solutions Coming Soon References SKScene SKScene Origin SKNodes SKSpriteNodes SKActions","title":"Moving Nodes"},{"location":"tutorials/003-MovingNodes/#spritekit-nodes","text":"SKNodes can be a large topic. Almost everything that makes a up a game is essentially a node of some sort. In previous tutorials, SKShapeNodes where used to draw a circle or square to the SKScene . This tutorial will cover drawing SKSpriteNodes and moving them around on the screen. Keep in mind moving nodes around is just one thing that can be done with nodes. Nodes are used for almost everything in games.","title":"SpriteKit Nodes"},{"location":"tutorials/003-MovingNodes/#getting-started","text":"Step 1. Create your project Step 2. Set the UIView to use the SKView class","title":"Getting Started"},{"location":"tutorials/003-MovingNodes/#a-scenes-origin","text":"A SKScene's origin is where new nodes will be created. It is also the point from where nodes will be positioned. By default the scene's origin ( anchorPoint ) is in the bottom left-hand corner of the screen. A SKScene is also a node, in fact, it is always the root node of a node tree. Children nodes are created at the origin of its parent node. With all that in mind if a new node is created it will appear at the parent node's origin, in this case, the SKScene is the parent. This point can be set by changing the origin anchorPoint property of the scene. Set the anchorPoint property to change the location of the origin using scene.anchorPoint = CGPoint(x: 0.5, y: 0.5) . The .anchorPoint property is not in the SKNode class meaning not all nodes will have an anchorPoint property, for example the SKShapeNode used in previous tutorials does not have it's own anchorPoint . For deeper details about positioning, origins, and the anchorPoint property read this article from Apple's documentation.","title":"A Scene's Origin"},{"location":"tutorials/003-MovingNodes/#setting-up-the-scene","text":"This code utilizes SKSpriteNode to create the rectangle. Once a sprite is in place it can be animated to perform actions. More information on SKSpriteNodes can be found in the documentation . More on this topic will be covered in future tutorials as well. Back in the ViewController.swift file utilize the following code to set up our scene. import UIKit import SpriteKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() if let skView = view as? SKView { let scene = SKScene(size: skView.bounds.size) scene.anchorPoint = CGPoint(x: 0.5, y: 0.5) // Create a rectangle shape using SKSpriteNode(color:, size: CGSize) let rectangleSprite = SKSpriteNode(color: .cyan, size: CGSize(width: 200, height: 100)) // print(rectangleSprite.anchorPoint) scene.addChild(rectangleSprite) skView.presentScene(scene) } } } Compile and run the code ( Cmd + R ) to see the results. Verify the origin of the sprite by removing the commented out print(rectangleSprite.anchorPoint) statement.","title":"Setting Up the Scene"},{"location":"tutorials/003-MovingNodes/#skactions","text":"SKActions are used to perform actions on a sprite node such as: Moving Rotating Scaling Resizing Scaling Animating There are many other things that can be done with SKActions . For greater details see the Action Initializers section of the SKAction documentation .","title":"SKActions"},{"location":"tutorials/003-MovingNodes/#getting-help-quickly","text":"This is a good point to pause and explain how to get help quickly from in the Xcode editor. The next couple of sections use partial code examples and some may be confusing. For example there will be a .zRotation property that can be modified. This method isn't exactly self explanatory so being able to reference the relative documentation quickly can be helpful. To do this hover over the method name hold the Option key and click the method name.","title":"Getting Help Quickly"},{"location":"tutorials/003-MovingNodes/#animating-sprites","text":"","title":"Animating Sprites"},{"location":"tutorials/003-MovingNodes/#rotating-a-sprite","text":"There are different ways to rotate sprites. Below are some example methods. See the full code sample section of this tutorial for a full example of these methods. rectangleSprite.zRotation = 1 To rotate a sprite using an SKAction adding the following code to the previous code example: // ... scene.anchorPoint = CGPoint(x: 0.5, y: 0.5) let rectangleSprite = SKSpriteNode(color: .cyan, size: CGSize(width: 200, height: 100)) // Create an action to rotate the rectangle by an angle of PI for a time interval of 1 second let rotateAction = SKAction.rotate(byAngle: .pi, duration: 1) // Create an action that will repeat the rotateAction forever let repeatingAction = SKAction.repeatForever(rotateAction) // Run the repeatingAction on the rectangleSprite rectangleSprite.run(repeatingAction) // The line commented out below is shorthand for the three lines above. // rectangleSprite.run(.repeatForever(.rotate(byAngle: .pi, duration: 1))) scene.addChild(rectangleSprite) skView.presentScene(scene) // ... Be careful not to confuse .rotate(byAngle:, duration:) with .rotate(toAngle:, duration:) . The SKAction.repeatForever(action:) function will not work with .rotate(toAngle:, duration:) . Using SKAction initializers two actions are created in the code above. The first action, rotateAction uses SKAction.rotate(byAngle:, duration:) to rotate a node counter clockwise by an angle of pi . The duration in the time interval in which the action should complete. In the example above the rectangle should complete one full rotation over a time period of one second. The second SKAction , SKAction.repeatForever(action:) , is used to take the rotateAction and repeat it forever.","title":"Rotating a Sprite"},{"location":"tutorials/003-MovingNodes/#scaling-nodes","text":"Just like rotating sprites there are different ways to scale down nodes. A few examples are listed below: // Using the scale(to:) method rectangleSprite.scale(to: CGSize(width: 50, height: 100)) // Using the setScale(_, scale:) method rectangleSprite.setScale(CGFloat(0.5)) // Setting the xScale and yScale properties manually. rectangleSprite.xScale = 2 rectangleSprite.yScale = 4 You will notice that when the app loads the rectangle is already scaled and there is no animation. Scaling animations can be achieved using SKActions . rectangleSprite.run(.scale(by: 2, duration: 3)) There are many different ways to scale a sprite using SKActions the above example is not the only way to do it. Refer to the Action Initializers section documentation for more details.","title":"Scaling Nodes"},{"location":"tutorials/003-MovingNodes/#moving-nodes","text":"Moving nodes around can be done setting the position property of a node as seen below: rectangleSprite.position = CGPoint(x: 80, y: 100) Using SKActions movement can be animated. rectangleSprite.run(.moveBy(x: 80, y: 100, duration: 3)) Once again the SKAction.moveBy(x:, y:, duration:) method is not the only one that can be used to animate sprite movement.","title":"Moving Nodes"},{"location":"tutorials/003-MovingNodes/#multiple-skactions","text":"SKActions can be used to animate many things. Actions can also be combined to use a sequence of actions. This can be used to create better visual effects. For example maybe a player picks up a power up item and it causes the sprite to grow large then small and then large again. This can be achieved using SKActions.sequence(actions: [SKAction]) function. To do this there are some code modifications. Move the creation of the rectangleSprite above the viewDidLoad() method. Then add a new function below the viewDidLoad() method. The movement of the rectangleSprite is so it can be used in the new function. // ... class ViewController: UIViewController { let rectangleSprite = SKSpriteNode(color: .cyan, size: CGSize(width: 50, height: 150)) override func viewDidLoad() { super.viewDidLoad() //... } func powerUp(){ let growAction = SKAction.scale(to: 1.5, duration: 0.25) let shrinkAction = SKAction.scale(to: 1.2, duration: 0.30) let growLargerAction = SKAction.scale(to: 1.9, duration: 0.25) let shrinkLessAction = SKAction.scale(to: 1.6, duration: 0.30) let finalGrowthAction = SKAction.scale(to: 2, duration: 1) let actionSequence = SKAction.sequence([growAction, shrinkAction, growLargerAction, shrinkLessAction, finalGrowthAction]) rectangleSprite.run(actionSequence) } } Next call the powerUp() in the viewDidLoad() method. //... class ViewController: UIViewController { let rectangleSprite = SKSpriteNode(color: .cyan, size: CGSize(width: 50, height: 150)) override func viewDidLoad() { super.viewDidLoad() //... powerUp() scene.addChild(rectangleSprite) //... } //... }","title":"Multiple SKActions"},{"location":"tutorials/003-MovingNodes/#full-code-sample","text":"Below is a full code example with some bonus material. It is recommended to uncomment different statements to see what they look like. To uncomment lines quickly move the cursor to the line to uncomment then use holding the Cmd key and pressing / to remove the // characters. import UIKit import SpriteKit class ViewController: UIViewController { let rectangleSprite = SKSpriteNode(color: .cyan, size: CGSize(width: 50, height: 150)) override func viewDidLoad() { super.viewDidLoad() if let skView = view as? SKView { let scene = SKScene(size: skView.bounds.size) scene.anchorPoint = CGPoint(x: 0.5, y: 0.5) // Repeat a rotation action forever. // rectangleSprite.run(.repeatForever(.rotate(byAngle: .pi, duration: 1))) // Scales the sprite by a factor of 2 for 3 seconds // rectangleSprite.run(.scale(by: 2, duration: 3)) // Move the sprite using an SKAction // rectangleSprite.run(.moveBy(x: 80, y: 100, duration: 2)) // Examples of rotatign sprites // rectangleSprite.zRotation = 1 // Examples of scaling sprites. // rectangleSprite.scale(to: CGSize(width: 50, height: 100)) // rectangleSprite.setScale(CGFloat(0.5)) // rectangleSprite.xScale = 2 // rectangleSprite.yScale = 4 // Examples of moving sprites // rectangleSprite.position = CGPoint(x: 80, y: 100) // Example of growth animation // powerUp() // Example of pulse animation // pulse() // Example of flying death trap // fanOfDoom() scene.addChild(rectangleSprite) skView.presentScene(scene) } } func powerUp(){ let growAction = SKAction.scale(to: 1.5, duration: 0.25) let shrinkAction = SKAction.scale(to: 1.2, duration: 0.30) let growLargerAction = SKAction.scale(to: 1.9, duration: 0.25) let shrinkLessAction = SKAction.scale(to: 1.6, duration: 0.30) let finalGrowthAction = SKAction.scale(to: 2, duration: 1) let actionSequence = SKAction.sequence([growAction, shrinkAction, growLargerAction, shrinkLessAction, finalGrowthAction]) rectangleSprite.run(actionSequence) } func pulse(){ let growAction = SKAction.scale(to: 1.5, duration: 0.25) let shrinkAction = SKAction.scale(to: 1.2, duration: 0.35) let actionSequence = SKAction.sequence([growAction, shrinkAction]) let repeatingAction = SKAction.repeatForever(actionSequence) rectangleSprite.run(repeatingAction) } func fanOfDoom(){ let moveAction = SKAction.moveTo(x: -120, duration: 2) let moveBackAction = SKAction.moveTo(x: 120, duration: 2) let rotateAction = SKAction.rotate(byAngle: .pi*8, duration: 4) let actionSequence = SKAction.sequence([moveAction, moveBackAction]) // SKAction.group allows actions to run in parallel. let groupOfActions = SKAction.group([rotateAction, actionSequence]) let repeatingAction = SKAction.repeatForever(groupOfActions) rectangleSprite.run(repeatingAction) } }","title":"Full Code Sample"},{"location":"tutorials/003-MovingNodes/#exercises","text":"Play around with the full code example Change the code and SKAction sequences around see what effects can be achieved Create a new effect Create a dying animation where the rectangle rotates, shrinks and fades out all at the same time Solutions Coming Soon","title":"Exercises"},{"location":"tutorials/003-MovingNodes/#references","text":"SKScene SKScene Origin SKNodes SKSpriteNodes SKActions","title":"References"}]}